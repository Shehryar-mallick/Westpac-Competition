# -*- coding: utf-8 -*-
"""Westpac-model-pipeline.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yKphtmaNIGJPagmbwHjO_U8UpQOl2eSr
"""

import pandas as pd
import joblib


def drop_null(df):
  """
  This function drops the null values from the dataframe
  """
  df = df.dropna()
  return df

def data_encoding(df):
  df['Gender'] = df['Gender'].replace({'Male': 1, 'Female': 0})
  df['Married'] = df['Married'].replace({'No': 0, 'Yes': 1})
  df['Dependents'] = df['Dependents'].replace({'0': 0, '1': 1, '2': 2, '3+': 3})
  df['Self_Employed'] = df['Self_Employed'].replace({'No': 0, 'Yes': 1})
  df['Education'] = df['Education'].replace({'Graduate': 1, 'Not Graduate': 0})
  df['Property_Area'] = df['Property_Area'].replace({'Rural': 0, 'Semiurban': 1, 'Urban': 2})
  df['Loan_Amount_Term'] = df['Loan_Amount_Term'].replace({36.0: 0, 60.0: 1, 84.0: 2, 120.0: 3, 180.0: 4, 240.0: 5, 300.0: 6, 360.0: 7, 480.0: 8})
  return df

def range_encoding(df):
  bins = [150, 7500, 14850, 22200, 29550, 36900, 44250, 51600, 58950, 66300, 73650, 81000]
  labels = list(range(len(bins) - 1))
  # Use pd.cut to categorize 'ApplicantIncome' into bins and assign labels directly
  df['ApplicantIncome'] = pd.cut(df['ApplicantIncome'], bins=bins, labels=labels, include_lowest=True).cat.codes

  binsCoAppIncome = [0, 3788, 7576, 11364, 15152, 18940, 22727, 26515, 30303, 34091, 37879, 41667]

  # Define the labels for each bin
  labelsCoAppIncome = list(range(len(binsCoAppIncome) - 1))

  # Use pd.cut to categorize 'CoapplicantIncome' into bins and replace with bin labels
  df['CoapplicantIncome'] = pd.cut(df['CoapplicantIncome'], bins=binsCoAppIncome, labels=labelsCoAppIncome, include_lowest=True).cat.codes

  binLoanAmount = [9, 68, 127, 186, 245, 304, 364, 423, 482, 541, 600]

  # Define the labels for each binD
  labelsLoanAmount = list(range(len(binLoanAmount) - 1))

  # Use pd.cut to categorize 'CoapplicantIncome' into bins and replace with bin labels
  df['LoanAmount'] = pd.cut(df['LoanAmount'], bins=binLoanAmount, labels=labelsLoanAmount, include_lowest=True).cat.codes

  return df

def preprocess_data(fileLoc):
  """
  This function reads the dataset and applies pre processing from the given file location
  """
  df = fileLoc
  df = drop_null(df)
  df = data_encoding(df)
  df = range_encoding(df)
  # df.to_csv('final_preprocessed_dataset.csv', index=False)
  return df

def main(file_name):
  file_location = input("Please enter the file location or path where 'trained_model.pkl' is located: ")
  model = joblib.load(file_location)
  # model = joblib.load('trained_model.pkl')

  unseen_df = pd.read_csv(file_name)
  unseen_df = preprocess_data(unseen_df)

  unseen_loan_ids = unseen_df['Loan_ID']
  X_unseen = unseen_df.drop(columns=['Loan_ID'])

  unseen_predictions = model.predict(X_unseen)

  results = unseen_df.copy()
  results['prediction'] = unseen_predictions

  # results.to_csv('unseen_loan_predictions.csv', index=False)
  results.to_json('unseen_loan_predictions.json', orient='records', lines=True)

  print("Predictions saved to 'unseen_loan_predictions.csv'")

main("loan_sanction_test.csv")